#textdomain wrw
# Author Blaker_BR

# All ranged attacks macros

# Sets ranged attack necessary data
#define WRW_SET_RANGED_ATTACK RANGED_ATTACK
{VARIABLE maximum_range ${RANGED_ATTACK}.specials.range.max_range}
{VARIABLE minimum_range ${RANGED_ATTACK}.specials.range.min_range}
{VARIABLE_OP minimum_range sub 1}

# Stores unit's movement
[set_variables]
    name=unit_original_movement_data
    mode=replace
    [value]
        initiated=yes
        moves=$attacker.moves
        castle=$attacker.movement_costs.castle
        cave=$attacker.movement_costs.cave
        reef=$attacker.movement_costs.reef
        deep_water=$attacker.movement_costs.deep_water
        flat=$attacker.movement_costs.flat
        forest=$attacker.movement_costs.forest
        frozen=$attacker.movement_costs.frozen
        fungus=$attacker.movement_costs.fungus
        hills=$attacker.movement_costs.hills
        mountains=$attacker.movement_costs.mountains
        sand=$attacker.movement_costs.sand
        shallow_water=$attacker.movement_costs.shallow_water
        swamp_water=$attacker.movement_costs.swamp_water
        village=$attacker.movement_costs.village
    [/value]
[/set_variables]

# Determines the 3 types of obstrucion:
## forest_obstruction -> may be ignored with unit has fire through forest or id on high ground
## partial_obstruction -> may be ignored if unit is on high ground
## total_obstruction -> cannot be ignored

[if]
    [have_unit]
        id=$attacker.id
        [and]
            [has_attack]
                name=${RANGED_ATTACK}.name
                special_id=wrw_fire_through_forest
            [/has_attack]
            [or]
                [filter_location]
                    terrain=C*^*,H*^*,K*^*,M*^*
                [/filter_location]
            [/or]
        [/and]
    [/have_unit]

    [then]
        {VARIABLE forest_obstruction 1}
    [/then]

    [else]
        {VARIABLE forest_obstruction $maximum_range}
    [/else]
[/if]

[if]
    [have_unit]
        id=$attacker.id
        [and]
            [filter_location]
                terrain=C*^*,H*^*,K*^*,M*^*
            [/filter_location]
        [/and]
    [/have_unit]

    [then]
        {VARIABLE partial_obstruction 1}
    [/then]

    [else]
        {VARIABLE partial_obstruction $maximum_range}
    [/else]
[/if]

{VARIABLE total_obstruction $maximum_range}

# Applies obstruction cost to unit's movement and lowers maximum range for next calculation
{VARIABLE_OP maximum_range sub 1}
[modify_unit]
    [filter]
        id=$attacker.id
    [/filter]
    
    moves=$maximum_range

    [effect]
        apply_to=movement_costs
        replace=yes
        [movement_costs]
            castle=$partial_obstruction
            cave=1
            reef=1
            deep_water=1
            flat=1
            forest=$forest_obstruction
            frozen=1
            fungus=$partial_obstruction
            hills=$total_obstruction
            mountains=$total_obstruction
            sand=1
            shallow_water=1
            swamp_water=1
            village=$partial_obstruction
        [/movement_costs]
    [/effect]
[/modify_unit]

# Clears obstruction variablest
{CLEAR_VARIABLE forest_obstruction}
{CLEAR_VARIABLE partial_obstruction}
{CLEAR_VARIABLE total_obstruction}

# Gets all possible ranges
[store_reachable_locations]
    variable=target_hexes
    range=attack
    viewing_side=$side_number

    [filter]
        id=$attacker.id
    [/filter]

    [filter_location]
        [not]
            x=$x1
            y=$y1
            radius=$minimum_range
        [/not]
    [/filter_location]
[/store_reachable_locations]

# Increases moves for next calculation
{VARIABLE_OP maximum_range add 1}
[modify_unit]
    [filter]
        id=$attacker.id
    [/filter]

    moves=$maximum_range
[/modify_unit]

# Setting up target hexes, target's distance and menu option for attack
[foreach]
    array=target_hexes
    variable=target_hex

    [do]
        # Calculates distance from attacker
        [find_path]
            variable=path
            allow_multiple_turns=yes
            check_teleport=no
            check_zoc=no
            
            [traveler]
                id=$attacker.id
            [/traveler]
    
            [destination]
                x=$target_hex.x
                y=$target_hex.y
            [/destination]
        [/find_path]
        
        {VARIABLE last_step_index $path.step.length}
        {VARIABLE_OP last_step_index sub 1}
        {VARIABLE penultimate_step_index $path.step.length}
        {VARIABLE_OP penultimate_step_index sub 2}
        
        # Final range validation
        [if]
            # Line of sight
            {VARIABLE_CONDITIONAL path.hexes equals $last_step_index}
            # Unbstructed Line of Sight
            {VARIABLE_CONDITIONAL path.step[$penultimate_step_index].movement_cost less_than $maximum_range}
            # Gurantee a long enough range won't mess things, as the this is calculated some hexes will 
            # require 2 turns
            {VARIABLE_CONDITIONAL path.required_turns less_than 3}

            [then]
                [modify_unit]
                    [filter]
                        [filter_location]
                            x=$target_hex.x
                            y=$target_hex.y
                        [/filter_location]
            
                        [filter_side]
                            [enemy_of]
                                side=$side_number
                            [/enemy_of]
                        [/filter_side]
                    [/filter]
        
                    {VARIABLE target_distance $path.hexes}
                [/modify_unit]
        
                # Paints hex with a marker
                [item]
                    name=wrw_range_marker
                    x=$target_hex.x
                    y=$target_hex.y
                    image="items/gohere.png"
                [/item]
            [/then]
        [/if]
   [/do]
[/foreach]

# Clears range variables
{CLEAR_VARIABLE minimum_range}
{CLEAR_VARIABLE maximum_range}
{CLEAR_VARIABLE last_step_index}
{CLEAR_VARIABLE penultimate_step_index}
{CLEAR_VARIABLE path}
{CLEAR_VARIABLE target_hexes}

# Restores unit'S movement cost
[modify_unit]
    [filter]
        id=$attacker.id
    [/filter]
    
    moves=$unit_original_movement_data.moves

    [effect]
        apply_to=movement_costs
        replace=yes
        [movement_costs]
            castle=$unit_original_movement_data.castle
            cave=$unit_original_movement_data.cave
            reef=$unit_original_movement_data.reef
            deep_water=$unit_original_movement_data.deep_water
            flat=$unit_original_movement_data.flat
            forest=$unit_original_movement_data.forest
            frozen=$unit_original_movement_data.frozen
            fungus=$unit_original_movement_data.fungus
            hills=$unit_original_movement_data.hills
            mountains=$unit_original_movement_data.mountains
            sand=$unit_original_movement_data.sand
            shallow_water=$unit_original_movement_data.shallow_water
            swamp_water=$unit_original_movement_data.swamp_water
            village=$unit_original_movement_data.village
        [/movement_costs]
    [/effect]
[/modify_unit]

# Sets menu item and eventual action
[set_menu_item]
    id=wrw_ranged_attack_target_menu_item
    description= _ "Attack"

    [show_if]
        [have_unit]
            x,y=$x1,$y1
            formula="self.wml_vars.target_distance > 0"
        [/have_unit]
    [/show_if]

    [command]
        [store_unit]
            variable=target_unit

            [filter]
                x,y=$x1,$y1
            [/filter]
        [/store_unit]

        [store_unit_defense_on]
            variable=target_unit_defense
            id=$target_unit.id
            loc_x=$x1
            loc_y=$y1
        [/store_unit_defense_on]

        # Calculates range penalty
        [if]
            {VARIABLE_CONDITIONAL target_unit.variables.target_distance greater_than 2}

            [then]
                {VARIABLE distance_penalty $target_unit.variables.target_distance}
                {VARIABLE_OP distance_penalty sub 2}
                {VARIABLE_OP distance_penalty multiply 5}
                {VARIABLE_OP target_unit_defense add $distance_penalty}
                {CLEAR_VARIABLE distance_penalty}
            [/then]
        [/if]

        # Applies penalty if unit moved
        [if]
            {VARIABLE_CONDITIONAL attacker.moves less_than $attacker.max_moves}

            [then]
                {VARIABLE_OP target_unit_defense add 20}
            [/then]
        [/if]

        # Applies attack accuracy
        {VARIABLE_OP target_unit_defense sub ${RANGED_ATTACK}.accuracy}

        # Enforce maximum and minimum defense values
        [if]
            {VARIABLE_CONDITIONAL target_unit_defense less_than 10}

            [then]
                {VARIABLE target_unit_defense 10}
            [/then]

            [else]
                [if]
                    {VARIABLE_CONDITIONAL target_unit_defense greater_than 90}

                    [then]
                        {VARIABLE target_unit_defense 90}
                    [/then]
                [/if]
            [/else]
        [/if]

        [message]
            message= _ "Attack has a $(100 - $target_unit_defense)% chance per strike.
Attack?"
            side_for=$side_number
            speaker=narrator

            [option]
                message="Yes."

                [command]
                    {WRW_RANGED_ATTACK_MAP_CLEAN_UP}
                    {VARIABLE attacker_attacks_left $attacker.attacks_left}
                    {VARIABLE attacks_made 0}
    
                    [while]
                        {VARIABLE_CONDITIONAL attacks_made less_than ${RANGED_ATTACK}.number}
                        [have_unit]
                            id=$target_unit.id
                        [/have_unit]
    
                        [do]
                            {VARIABLE_OP attacks_made add 1}
                            [set_variable]
                                name=attack_roll
                                rand=1..100
                            [/set_variable]
    
                            [if]
                                {VARIABLE_CONDITIONAL attack_roll greater_than_equal_to $target_unit_defense}
                            
                                [then]
                                    [harm_unit]
                                        amount=${RANGED_ATTACK}.damage
                                        damage_type=${RANGED_ATTACK}.type
                                        alignment=$attacker.alignment
                                        animate=yes
                                        experience=no
    
                                        [filter]
                                            id=$target_unit.id
                                        [/filter]
                            
                                        [filter_second]
                                            id=$attacker.id
                                        [/filter_second]
                            
                                        [primary_attack]
                                            name=${RANGED_ATTACK}.name
                                        [/primary_attack]
                                    [/harm_unit]
                                [/then]
    
                                [else]
                                    [animate_unit]
                                        flag=attack
                                        hits=miss
                                        with_bars=yes
    
                                        [filter]
                                            id=$attacker.id
                                        [/filter]
                            
                                        [primary_attack]
                                            name=${RANGED_ATTACK}.name
                                        [/primary_attack]
    
                                        [facing]
                                            [filter]
                                                id=$target_unit.id
                                            [/filter]
                                        [/facing]
    
                                        [animate]
                                            flag=defend
                                            hits=no
                                            with_bars=yes
        
                                            [filter]
                                                id=$target_unit.id
                                            [/filter]
        
                                            [facing]
                                                [filter]
                                                    id=$attacker.id
                                                [/filter]
                                            [/facing]
                                        [/animate]
                                    [/animate_unit]
                                [/else]
                            [/if]
                        [/do]
                    [/while]

                    # Handles experience gain
                    {VARIABLE damage_dealt $target_unit.hitpoints}
                    {VARIABLE target_level $target_unit.level}

                    # Gets target after damage
                    [store_unit]
                        variable=target_unit

                        [filter]
                            id=$target_unit.id
                        [/filter]
                    [/store_unit]

                    # Gets and applies damage experience
                    {VARIABLE_OP damage_dealt sub $target_unit.hitpoints}
                    {WRW_APPLY_RANGED_EXP_GAIN $attacker.id $attacker.experience damage_dealt}
                    {CLEAR_VARIABLE damage_dealt}

                    # Applies kill experience if target was killed
                    [if]
                        {VARIABLE_CONDITIONAL target_unit.hitpoints less_than 1}

                        [then]
                            {VARIABLE kill_experience $target_level}
                            [if]
                                {VARIABLE_CONDITIONAL target_level equals 0}

                                [then]
                                    {VARIABLE kill_experience 4}
                                [/then]

                                [else]
                                    {VARIABLE kill_experience 8}
                                    {VARIABLE_OP kill_experience multiply $target_level}
                                [/else]
                            [/if]

                            [modify_unit]
                                [filter]
                                    id=$attacker.id
                                [/filter]

                                [effect]
                                    apply_to=experience
                                    increase=$kill_experience
                                [/effect]
                            [/modify_unit]
                            {CLEAR_VARIABLE kill_experience}
                        [/then]
                    [/if]
                    {CLEAR_VARIABLE target_level}
                    
                    # Updates attacks left and moves
                    {VARIABLE_OP attacker_attacks_left sub 1}
    
                    [modify_unit]
                        [filter]
                            id=$attacker.id
                        [/filter]

                        moves=0
                        attacks_left=$attacker_attacks_left
                    [/modify_unit]

                    # Clean up
                    {CLEAR_VARIABLE attacks_made}
                    {CLEAR_VARIABLE attacker_attacks_left}
                    {CLEAR_VARIABLE attack_roll}
                    {WRW_RANGED_ATTACK_DATA_CLEAN_UP}
                [/command]
            [/option]

            [option]
                message="No."
            [/option]
        [/message]
    [/command]
[/set_menu_item]

{CLEAR_VARIABLE unit_original_movement_data}
#enddef

# Sets attack options
#define WRW_RANGED_ATTACK_OPTION RANGED_ATTACK ATTACKS_LENGTH OPTION_NUMBER
[option]
    [show_if]
        {VARIABLE_CONDITIONAL {ATTACKS_LENGTH} greater_than_equal_to {OPTION_NUMBER}}
    [/show_if]
    
    image=${RANGED_ATTACK}.icon
    message=${RANGED_ATTACK}.description ${RANGED_ATTACK}.number|x${RANGED_ATTACK}.damage ${RANGED_ATTACK}.type Range ${RANGED_ATTACK}.specials.ranged.min_range|-${RANGED_ATTACK}.specials.ranged.max_range

    [command]
        {WRW_SET_RANGED_ATTACK {RANGED_ATTACK}}
    [/command]
[/option]
#enddef

# Cleans map
#define WRW_RANGED_ATTACK_MAP_CLEAN_UP
[remove_item]
    image=wrw_range_marker
[/remove_item]

[redraw]
[/redraw]
#enddef

# Clears variables and menu
#define WRW_RANGED_ATTACK_DATA_CLEAN_UP
# Clears menu item
[clear_menu_item]
    id=wrw_ranged_attack_target_menu_item
[/clear_menu_item]

# Clears target distance from all possible target units
[modify_unit]
    [filter]
        formula="self.wml_vars.target_distance > 0"
    [/filter]

    {CLEAR_VARIABLE target_distance}
[/modify_unit]

# Clears variables
{CLEAR_VARIABLE attacker}
{CLEAR_VARIABLE ranged_attacks}
{CLEAR_VARIABLE attack_index}
{CLEAR_VARIABLE target_unit}
{CLEAR_VARIABLE target_unit_defense}
#enddef