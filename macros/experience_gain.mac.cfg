#textdomain wrw
# Author Blaker_BR

# Handles expirience gain

# Sets multiplier for melee
#define WRW_APPLY_MELEE_EXP_GAIN UNIT OPPONENT
{WRW_APPLY_EXP_GAIN {UNIT} {OPPONENT} 2}
#enddef

# Sets multiplier for ranged
#define WRW_APPLY_RANGED_EXP_GAIN UNIT OPPONENT
{WRW_APPLY_EXP_GAIN {UNIT} {OPPONENT} 1}
#enddef

# Calculates and apply experience
#define WRW_APPLY_EXP_GAIN UNIT OPPONENT RANGE_MULTIPLIER

# Sets base Experience gain
{VARIABLE experience_gain 1}
{VARIABLE_OP experience_gain multiply {RANGE_MULTIPLIER}}

# Gets unit cost
{VARIABLE unit_cost ${UNIT}.modifications.advancement.length}
{VARIABLE_OP unit_cost multiply 0.1}
{VARIABLE_OP unit_cost add 1}
{VARIABLE_OP unit_cost multiply ${UNIT}.cost}

# Gets Opponent cost
{VARIABLE opponent_cost ${OPPONENT}.modifications.advancement.length}
{VARIABLE_OP opponent_cost multiply 0.1}
{VARIABLE_OP opponent_cost add 1}
{VARIABLE_OP opponent_cost multiply ${OPPONENT}.cost}

# Gets and applies cost multiplier
{VARIABLE cost_multiplier $opponent_cost}
{VARIABLE_OP cost_multiplier divide $unit_cost}
{VARIABLE_OP experience_gain multiply $cost_multiplier}

# Rounds final value and substracts experience already given by the game
{VARIABLE_OP experience_gain round ceil}
{VARIABLE_OP experience_gain sub ${OPPONENT}.level}

# Checks for ambitious and human ambition traits
[if]
    [have_unit]
        id=${UNIT}.id
        trait=wrw_ambitious
    [/have_unit]

    [then]
        {VARIABLE_OP experience_gain add 1}
    [/then]

    [elseif]
        [have_unit]
            id=${UNIT}.id
            trait=wrw_human_ambition
        [/have_unit]
    
        [then]
            {VARIABLE_OP experience_gain add 2}
        [/then]
    [/elseif]
[/if]

# Checks for minimal experience
[if]
    {VARIABLE_CONDITIONAL experience_gain greater_than 0}

    [then]
        # Gives experience
        [modify_unit]
            [filter]
                id=${UNIT}.id
            [/filter]
                
            [effect]
                apply_to=experience
                increase=$experience_gain
            [/effect]
        [/modify_unit]
    [/then]
[/if]

# Variable clean up
{CLEAR_VARIABLE experience_gain}
{CLEAR_VARIABLE unit_cost}
{CLEAR_VARIABLE opponent_cost}
{CLEAR_VARIABLE cost_multiplier}
#enddef