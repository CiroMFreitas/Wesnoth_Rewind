#textdomain wrw
# Author Blaker_BR

# Macros to handle custom attack made with harm_unit tag

# Determines target unit defense
#define WRW_DETERMINE_TARGET_DEFENSE ATTACKER ATTACK DEFENDER DEFENDER_DEFENSE
# Determines base defense
[store_unit_defense_on]
    variable={DEFENDER_DEFENSE}
    id=${DEFENDER}.id
    loc_x=${DEFENDER}.x
    loc_y=${DEFENDER}.y
[/store_unit_defense_on]

# Applies attack accuracy
{VARIABLE_OP {DEFENDER_DEFENSE} sub ${ATTACK}.accuracy}

# Trait handling in alphabetical order

# Armored/Anti-Armored check
[if]
    [have_unit]
        id=${DEFENDER}.id
        trait=wrw_armored
    [/have_unit]

    [have_unit]
        id=${ATTACKER}.id

        [has_attack]
            name=${ATTACK}.name
            type=blade,pierce,impact
        [/has_attack]
    [/have_unit]

    [not]
        [have_unit]
            id=${ATTACKER}.id

            [has_attack]
                name=${ATTACK}.name
                special_id=wrw_anti_armored
            [/has_attack]
        [/have_unit]
    [/not]

    [then]
        {VARIABLE_OP {DEFENDER_DEFENSE} add ${DEFENDER}.abilities.armored.defense}
    [/then]
[/if]

# Attacker Mounted check
[if]
    [have_unit]
        id=${ATTACKER}.id
        trait=mounted

        [not]
            [has_attack]
                name=${ATTACK}.name
                special_id=wrw_range
            [/has_attack]
        [/not]
    [/have_unit]

    [then]
        {VARIABLE_OP {DEFENDER_DEFENSE} sub ${ATTACKER}.abilities.mounted.accuracy}
    [/then]
[/if]

# Defender Mounted check
[if]
    [have_unit]
        id=${DEFENDER}.id
        trait=mounted

        [not]
            [has_attack]
                name=${ATTACK}.name
                special_id=wrw_range
            [/has_attack]
        [/not]
    [/have_unit]

    [then]
        {VARIABLE_OP {DEFENDER_DEFENSE} add ${ATTACKER}.abilities.mounted.defense}
    [/then]
[/if]

# Ability handling in alphabetical order

# Attacker Accuracy Leadership check
[store_unit]
    variable=leadership_accuracy_givers

    [filter]
        [filter_ability]
            id=leadership_accuracy
        [/filter_ability]

        [filter_adjacent]
            id=${ATTACKER}.id
            is_enemy=no
        [/filter_adjacent]
    [/filter]
[/store_unit]

{VARIABLE highest_leadership_accuracy 0}
[foreach]
    array=leadership_accuracy_givers
    variable=leadership_accuracy_giver

    [do]
        [if]
            {VARIABLE_CONDITIONAL highest_leadership_accuracy less_than $leadership_accuracy_giver.abilities.wrw_leadership.accuracy}

            [then]
                {VARIABLE highest_leadership_accuracy $leadership_accuracy_giver.abilities.wrw_leadership.accuracy}
            [/then]
        [/if]
    [/do]
[/foreach]
{VARIABLE_OP {DEFENDER_DEFENSE} sub highest_leadership_accuracy}
{CLEAR_VARIABLE leadership_accuracy_givers}
{CLEAR_VARIABLE highest_leadership_accuracy}

# Defender Defense Leadership check
[store_unit]
    variable=leadership_defense_givers

    [filter]
        [filter_ability]
            id=leadership_defense
        [/filter_ability]

        [filter_adjacent]
            id=${DEFENDER}.id
            is_enemy=no
        [/filter_adjacent]
    [/filter]
[/store_unit]

{VARIABLE highest_leadership_defense 0}
[foreach]
    array=leadership_defense_givers
    variable=leadership_defense_giver

    [do]
        [if]
            {VARIABLE_CONDITIONAL highest_leadership_defense less_than $leadership_accuracy_giver.abilities.wrw_leadership.accuracy}
            {VARIABLE_CONDITIONAL leadership_accuracy_giver.abilities.wrw_leadership.accuracy greater_than 0}

            [then]
                {VARIABLE highest_leadership_defense $leadership_accuracy_giver.abilities.wrw_leadership.accuracy}
            [/then]
        [/if]
    [/do]
[/foreach]
{VARIABLE_OP {DEFENDER_DEFENSE} add highest_leadership_defense}
{CLEAR_VARIABLE leadership_defense_givers}
{CLEAR_VARIABLE highest_leadership_defense}

# Weapon Special handling in alphabetical order

# Accurate / Precise check
[if]
    [have_unit]
        id=${ATTACKER}.id

        [has_attack]
            name=${ATTACK}.name
            special_id=wrw_accurate
        [/has_attack]
    [/have_unit]

    [then]
        {VARIABLE_OP {DEFENDER_DEFENSE} sub 10}
    [/then]

    [elseif]
        [have_unit]
            id=${ATTACKER}.id
    
            [has_attack]
                name=${ATTACK}.name
                special_id=wrw_precise
            [/has_attack]
        [/have_unit]
    
        [then]
            {VARIABLE_OP {DEFENDER_DEFENSE} sub 20}
        [/then]
    [/elseif]
[/if]

# Impetus / Super Impetus check
[if]
    [have_unit]
        id=${ATTACKER}.id

        [has_attack]
            name=${ATTACK}.name
            [and]
                special_id=wrw_impetus
                [or]
                    special_id=wrw_super_impetus
                [/or]
            [/and]
        [/has_attack]
    [/have_unit]

    [then]
        {VARIABLE_OP {DEFENDER_DEFENSE} sub 10}
    [/then]
[/if]

# Attacker Skilled / Mastery check
[if]
    [have_unit]
        id=${ATTACKER}.id

        [has_attack]
            name=${ATTACK}.name
            special_id=wrw_skilled
        [/has_attack]
    [/have_unit]

    [then]
        {VARIABLE_OP {DEFENDER_DEFENSE} sub 10}
    [/then]

    [elseif]
        [have_unit]
            id=${ATTACKER}.id
    
            [has_attack]
                name=${ATTACK}.name
                special_id=wrw_mastery
            [/has_attack]
        [/have_unit]
    
        [then]
            {VARIABLE_OP {DEFENDER_DEFENSE} sub 20}
        [/then]
    [/elseif]
[/if]

# Defender Skilled / Mastery check
[if]
    [have_unit]
        id=${DEFENDER}.id

        [has_attack]
            range=melee
            special_id=wrw_skilled
        [/has_attack]
    [/have_unit]

    [have_unit]
        id=${ATTACKER}.id

        [has_attack]
            name=${ATTACK}.name
            range=melee
        [/has_attack]
    [/have_unit]

    [then]
        {VARIABLE_OP {DEFENDER_DEFENSE} add 10}
    [/then]

    [elseif]
        [have_unit]
            id=${DEFENDER}.id
    
            [has_attack]
                range=melee
                special_id=wrw_mastery
            [/has_attack]
        [/have_unit]

        [have_unit]
            id=${ATTACKER}.id
    
            [has_attack]
                name=${ATTACK}.name
                range=melee
            [/has_attack]
        [/have_unit]
    
        [then]
            {VARIABLE_OP {DEFENDER_DEFENSE} add 20}
        [/then]
    [/elseif]
[/if]
#enddef

# Wesnoth damage calculation seems to be as follows:
# (Base damage + Interger Modifiers) * (100 + Percentage multipliers)%
# Rounds the above calculation to nearest value, but with a caveat
# If the resulting damage is higher than the base damage
# 0.5 will be rounded up
# Otherwise 0.5 will be rounded down

# Let's call the result above modified base damage as it then will start applying weapon special bonus as
# (modified base damage + addtive bonuses - subtractive bonuses) ->
# -> * (multiplicative bonus1 * .. * multiplicative bonusN ) / (dividend bonus1 + .. + dividend bonusN)
# The resulting value is always rounded down

# Then finally the final base damage is multiplied by the 3 remaning variables as shown belor
# final Base Damage * (100 + Time of Day + Leadership)% * Resistance%
# Like how modified base damage is rounded this one follows a similar rounding step, altough inverted
# If the resulting total damage would be higher the Modified base damage, 0.5 will be rounded down
# Otherwise 0.5 is rounded up

# Determines attack final damage
#define WRW_DETERMINE_ATTACK_DAMAGE ATTACKER ATTACK DEFENDER DAMAGE
# The first step is already applied by the game
{VARIABLE {DAMAGE} ${ATTACK}.damage}
{VARIABLE unmodified_base_damage ${DAMAGE}}

# Applies weapon specials modifiers

# Anti-Armored
[if]
    [have_unit]
        id=${ATTACKER}.id

        [has_attack]
            name=${ATTACK}.name
            special_id=wrw_anti_armored
        [/has_attack]
    [/have_unit]

    [have_unit]
        id=${DEFENDER}.id
        trait=wrw_armored
    [/have_unit]

    [then]
        {VARIABLE_OP {DAMAGE} multiply 1.25}
    [/then]
[/if]

# Impetus / Super Impetus
[if]
    [have_unit]
        id=${ATTACKER}.id

        [has_attack]
            name=${ATTACK}.name
            special_id=wrw_impetus
        [/has_attack]
    [/have_unit]

    [then]
        {VARIABLE_OP {DAMAGE} multiply 1.5}
    [/then]

    [elseif]
        [have_unit]
            id=${ATTACKER}.id
    
            [has_attack]
                name=${ATTACK}.name
                special_id=wrw_super_impetus
            [/has_attack]
        [/have_unit]
    
        [then]
            {VARIABLE_OP {DAMAGE} multiply 2}
        [/then]
    [/elseif]
[/if]

# Rounds Damage
[set_variable]
    name={DAMAGE}
    value=${DAMAGE}
    round=floor
[/set_variable]

# Applies final modifiers
{VARIABLE modifiers 100}

[store_unit]
    variable=leadership_units

    [filter]
        is_enemy=no
    
        [filter_adjacent]
            id=${ATTACKER}.id
        [/filter_adjacent]
        
        [filter_ability]
            id=leadership
        [/filter_ability]

        # Excludes Ruthless Command for ranged attacks
        [not]
            [filter_ability]
                id=wrw_ruthless_command_strikes
            [/filter_ability]
    
            [filter_adjacent]
                id=${ATTACKER}.id
                
                [has_attack]
                    name=${ATTACK}.name
                    range=ranged
                [/has_attack]
            [/filter_adjacent]
        [/not]
    [/filter]
[/store_unit]

{VARIABLE highest_leadership_value 0}

[foreach]
    array=leadership_units
    variable=leadership_unit

    [do]
        [if]
            {VARIABLE_CONDITIONAL leadership_unit.abilities.leadership.value less_than $highest_leadership_value}

            [then]
                {VARIABLE highest_leadership_value $leadership_unit.abilities.leadership.value}
            [/then]
        [/if]
    [/do]
[/foreach]
{VARIABLE_OP modifiers add $highest_leadership_value}
{CLEAR_VARIABLE leadership_units}
{CLEAR_VARIABLE highest_leadership_value}

# Apply Time of Day bonus -> ToD_bonus
{VARIABLE ToD_bonus 0}

# ToD handling
[if]
    # ToD bonus for lawfull units
    [have_unit]
        id=${ATTACKER}.id
        alignment=lawful
    [/have_unit]

    [then]
        [if]
            [have_unit]
                id=${ATTACKER}.id
                
                [and]
                    [filter_location]
                        time_of_day=morning,afternoon
                    [/filter_location]

                    [or]
                        [filter_adjacent]
                            [filter_ability]
                                id=illumination
                            [/filter_ability]
                        [/filter_adjacent]
                    [/or]
                [/and]
            [/have_unit]

            [then]
                {VARIABLE_OP ToD_bonus add 25}
            [/then]
        [/if]

        [if]
            [have_unit]
                id=${ATTACKER}.id

                [filter_location]
                    time_of_day=first watch,second watch
                [/filter_location]
            [/have_unit]

            [then]
                {VARIABLE_OP ToD_bonus sub 25}
            [/then]
        [/if]
    [/then]

    # ToD bonus for Chaotic units
    [elseif]
        [have_unit]
            id=${ATTACKER}.id
            alignment=chaotic
        [/have_unit]

        [then]
            [if]
                [have_unit]
                    id=${ATTACKER}.id
    
                    [filter_location]
                        time_of_day=first watch,second watch
                    [/filter_location]
                [/have_unit]
    
                [then]
                    {VARIABLE_OP ToD_bonus add 25}
                [/then]
            [/if]

            [if]
                [have_unit]
                    id=${ATTACKER}.id
                    
                    [and]
                        [filter_location]
                            time_of_day=morning,afternoon
                        [/filter_location]
    
                        [or]
                            [filter_adjacent]
                                [filter_ability]
                                    id=illumination
                                [/filter_ability]
                            [/filter_adjacent]
                        [/or]
                    [/and]
                [/have_unit]
    
                [then]
                    {VARIABLE_OP ToD_bonus sub 25}
                [/then]
            [/if]
        [/then]
    [/elseif]

    # ToD bonus for Liminal units
    [elseif]
        [have_unit]
            id=${ATTACKER}.id
            alignment=liminal

            [filter_location]
                time_of_day=dawn,dusk
            [/filter_location]
        [/have_unit]

        [then]
            {VARIABLE_OP ToD_bonus add 25}
        [/then]
    [/elseif]
[/if]
{VARIABLE_OP modifiers add ToD_bonus}
{CLEAR_VARIABLE ToD_bonus}

# Applies modifiers and rounds
{VARIABLE_OP modifiers divide 100}
{VARIABLE_OP {DAMAGE} multiply $modifiers}
{CLEAR_VARIABLE modifiers}

# Applies Resistance
{VARIABLE resistance "${DEFENDER}.resistance.${ATTACK}.type"}
{VARIABLE_OP resistance divide 100}
{VARIABLE_OP {DAMAGE} multiply $resistance}
{CLEAR_VARIABLE resistance}

#Final rounding
[set_variable]
    name=decimal
    fpart=${DAMAGE}
[/set_variable]

[if]
    {VARIABLE_CONDITIONAL decimal greater_than_equal_to 0.5}
    {VARIABLE_CONDITIONAL unmodified_base_damage greater_than {DAMAGE}}
    [or]
        {VARIABLE_CONDITIONAL decimal greater_than 0.5}
        {VARIABLE_CONDITIONAL unmodified_base_damage less_than {DAMAGE}}
    [/or]

    [then]
        [set_variable]
            name={DAMAGE}
            value=${DAMAGE}
            round=ceil
        [/set_variable]
    [/then]

    [else]
        [set_variable]
            name={DAMAGE}
            value=${DAMAGE}
            round=floor
        [/set_variable]
    [/else]
[/if]
{CLEAR_VARIABLE unmodified_base_damage}
{CLEAR_VARIABLE decimal}
#enddef

# Determines target attack strikes
#define WRW_DETERMINE_ATTACK_STRIKES ATTACKER ATTACK STRIKES
{VARIABLE {STRIKES} ${ATTACK}.number}

# Applies abillity related strike bonus

# Aggressive
[if]
    [have_unit]
        id=${ATTACKER}.id
        side=$side_number

        [filter_ability]
            id=wrw_aggressive
        [/filter_ability]
    [/have_unit]

    [then]
        {VARIABLE_OP {STRIKES} add ${ATTACKER}.abilities.aggressive.strikes}
    [/then]
[/if]

# Chlorophyl
[if]
    [have_unit]
        id=${ATTACKER}.id
        side=$side_number

        [filter_ability]
            id=wrw_chlorophyl
        [/filter_ability]
    [/have_unit]

    [then]
        {VARIABLE_OP {STRIKES} add ${ATTACKER}.abilities.chlorophyl.strikes}
    [/then]
[/if]

# Leardership strike check
[store_unit]
    variable=leadership_strike_givers

    [filter]
        [filter_ability]
            id=leadership_strike
        [/filter_ability]

        [filter_adjacent]
            id=${ATTACKER}.id
            is_enemy=no
        [/filter_adjacent]
    [/filter]
[/store_unit]

{VARIABLE highest_leadership_strike 0}
[foreach]
    array=leadership_strike_givers
    variable=leadership_strike_giver

    [do]
        [if]
            {VARIABLE_CONDITIONAL highest_leadership_strike less_than $leadership_strike_giver.abilities.wrw_leadership.strikes}
            [and]
                {VARIABLE_CONDITIONAL leadership_strike_giver.abilities.wrw_leadership.range equals ${ATTACK}.range}
                [or]
                    {VARIABLE_CONDITIONAL leadership_strike_giver.abilities.wrw_leadership.range equals "both"}
                [/or]
            [/and]

            [then]
                {VARIABLE highest_leadership_strike $leadership_strike_giver.abilities.wrw_leadership.strikes}
            [/then]
        [/if]
    [/do]
[/foreach]
{VARIABLE_OP {STRIKES} add $highest_leadership_strike}
{CLEAR_VARIABLE leadership_strike_givers}
{CLEAR_VARIABLE highest_leadership_strike}
#enddef

# Executes attack
#define WRW_EXECUTE_ATTTACK ATTACKER DEFENDER ATTACK DEFENSE DAMAGE STRIKES DAMAGE_DEALT
{VARIABLE attacks_made 0}
{VARIABLE {DAMAGE_DEALT} 0}
    
[while]
    {VARIABLE_CONDITIONAL attacks_made less_than {STRIKES}}
    [have_unit]
        id=${DEFENDER}.id
    [/have_unit]
    
    [do]
        {VARIABLE_OP attacks_made add 1}
        [set_variable]
            name=attack_roll
            rand=1..100
        [/set_variable]
    
        [if]
            {VARIABLE_CONDITIONAL attack_roll greater_than_equal_to {DEFENSE}}
        
            [then]
                [harm_unit]
                    amount={DAMAGE}
                    animate=yes
                    experience=no
    
                    [filter]
                        id=${DEFENDER}.id
                    [/filter]
                            
                    [filter_second]
                        id=${ATTACKER}.id
                    [/filter_second]
                            
                    [primary_attack]
                        name=${ATTACK}.name
                    [/primary_attack]
                [/harm_unit]

                {VARIABLE_OP {DAMAGE_DEALT} add {DAMAGE}}

                {WRW_APPLY_ATTACK_EFFECTS {ATTACKER} {ATTACK} {DEFENDER}}
            [/then]
    
            [else]
                [animate_unit]
                    flag=attack
                    hits=miss
                    with_bars=yes
    
                    [filter]
                        id=${ATTACKER}.id
                    [/filter]
                            
                    [primary_attack]
                        name=${ATTACK}.name
                    [/primary_attack]
    
                    [facing]
                        [filter]
                            id=${DEFENDER}.id
                        [/filter]
                    [/facing]
    
                    [animate]
                        flag=defend
                        hits=no
                        with_bars=yes
        
                        [filter]
                            id=${DEFENDER}.id
                        [/filter]
        
                        [facing]
                            [filter]
                                id=${ATTACKER}.id
                            [/filter]
                        [/facing]
                    [/animate]
                [/animate_unit]
            [/else]
        [/if]
    [/do]
[/while]
{CLEAR_VARIABLE attacks_made}
#enddef

# Executes attack
#define WRW_APPLY_ATTACK_EFFECTS ATTACKER ATTACK DEFENDER
# Poison
[if]
    [have_unit]
        id=${ATTACKER}.id

        [has_attack]
            name=${ATTACK}.name
            special_id=poison
        [/has_attack]
    [/have_unit]

    [have_unit]
        id=${DEFENDER}.id

        [not]
            status=poisoned
        [/not]
    [/have_unit]

    [then]
        [store_unit]
            variable={DEFENDER}

            [filter]
                id=${DEFENDER}.id
            [/filter]
        [/store_unit]

        [unstore_unit]
            variable={DEFENDER}
            text=poisoned
            {COLOR_HARM}
        [/unstore_unit]

        [sound]
            name=poison.ogg
        [/sound]

        [modify_unit]
            [filter]
                id=${DEFENDER}.id
            [/filter]

            [effect]
                apply_to=status
                add=poisoned
            [/effect]
        [/modify_unit]
    [/then]
[/if]

# Slow
[if]
    [have_unit]
        id=${ATTACKER}.id

        [has_attack]
            name=${ATTACK}.name
            special_id=slow
        [/has_attack]
    [/have_unit]

    [have_unit]
        id=${DEFENDER}.id

        [not]
            status=slowed
        [/not]
    [/have_unit]

    [then]
        [store_unit]
            variable={DEFENDER}

            [filter]
                id=${DEFENDER}.id
            [/filter]
        [/store_unit]

        [unstore_unit]
            variable={DEFENDER}
            text=slowed
            {COLOR_HARM}
        [/unstore_unit]

        [sound]
            name=slowed.wav
        [/sound]

        [modify_unit]
            [filter]
                id=${DEFENDER}.id
            [/filter]

            [effect]
                apply_to=status
                add=slowed
            [/effect]
        [/modify_unit]
    [/then]
[/if]
#enddef